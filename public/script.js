// --------------------
// üïí ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ ‡∏ì ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ
// --------------------
const startDate = "2026-01-04";
const now = new Date();

// ‡∏ú‡∏π‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
const runTime = new Date(startDate + "T" +
  now.getHours().toString().padStart(2, '0') + ":" +
  now.getMinutes().toString().padStart(2, '0') + ":" +
  now.getSeconds().toString().padStart(2, '0')
);

// ‚è± ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà Server ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ô (‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ê‡∏≤‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤)
const serverStartTime = new Date();

// --------------------
// üì¶ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
// --------------------
async function loadData() {
  const res = await fetch("/api/mock");
  const jobs = await res.json();
  renderTable(jobs);
  setInterval(() => renderTable(jobs), 1000);
}

function renderTable(jobs) {
  const tbody = document.getElementById("jobBody");
  tbody.innerHTML = "";

  jobs.forEach(job => {
    const allDone =
      job.packing.endTime && job.checking.endTime && job.loading.endTime;

    ["packing", "checking", "loading"].forEach((op, i) => {
      const task = job[op];
      const tr = document.createElement("tr");

      const bgColor = !task.startTime
        ? "bg-gray-100"
        : task.endTime
          ? "bg-green-100"
          : "bg-orange-100";

      const borderColor = "border-blue-900";

      // üßÆ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤ Duration
      let duration;
      if (task.endTime != null) {
        duration = task.startTime
          ? getElapsed(task.startTime, task.endTime)
          : "-";
      } else {
        // üü¢ ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡∏ö‡∏á‡∏≤‡∏ô ‚Üí ‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà Server ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ô
        const diff = Math.floor((new Date() - serverStartTime) / 1000);
        const safeDiff = diff > 0 ? diff : 1; // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏™‡∏°‡∏≠
        duration = getElapsed(0, safeDiff * 1000);
      }

      tr.className = `${bgColor} ${borderColor} border-t`;

      tr.innerHTML = `
        ${op === "packing"
          ? `<td class="p-3 border border-orange-800 font-bold text-blue-900" rowspan="3">${job.job}</td>`
          : ""}
        <td class="p-3 border border-orange-800 capitalize text-blue-900 font-semibold">${op}</td>
        <td class="p-3 border border-orange-800">${task.worker || "-"}</td>
        <td class="p-3 border border-orange-800">${task.startTime ? formatTime(task.startTime) : "-"}</td>
        <td class="p-3 border border-orange-800">${task.endTime ? formatTime(task.endTime) : "-"}</td>
        <td class="p-3 border border-orange-800 ${!task.startTime
          ? "text-gray-400"
          : task.endTime
            ? "text-green-700 font-semibold"
            : "text-orange-700 font-semibold"
          }">
          ${!task.startTime && !task.endTime
            ? "-" // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á start ‡πÅ‡∏•‡∏∞ end
            : duration
          }
        </td>
        ${op === "packing"
          ? `<td class="p-3 border border-orange-800 text-center font-semibold text-lg" rowspan="3">
              ${allDone
            ? `<span class='text-green-600'>‚úÖ</span>`
            : `<span class='text-orange-600'>‚è≥</span>`}
            </td>`
          : ""}
      `;
      tbody.appendChild(tr);
    });
  });
}

// --------------------
// üïí Helper Functions
// --------------------
function formatTime(t) {
  const d = new Date(t);
  return d.toLocaleTimeString([], {
    hour: "2-digit",
    minute: "2-digit",
    second: "2-digit"
  });
}

function getElapsed(startTime, endTime) {
  const diff = Math.floor((new Date(endTime) - new Date(startTime)) / 1000);
  const h = Math.floor(diff / 3600);
  const m = Math.floor((diff % 3600) / 60);
  const s = diff % 60;
  return `${h}h ${m}m ${s}s`;
}

loadData();
